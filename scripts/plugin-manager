#!/usr/bin/env bash
set -e

cd "$(realpath "$(dirname "$(realpath "$0")")/..")"

if [[ "$UNSAFE" = "true" ]]; then
  echo -e "\e[33mWarning:\e[39m plugin-manager started unsafe (doesn't require a virtualenv)"
  PIP="pip3"
else
  PIP="pip3 --require-virtualenv"
fi

SOURCE="plugins"
TARGET="src/dynapi/plugins"
mkdir -p "$TARGET"

FGG="\e[32m"
FGR="\e[31m"
FGY="\e[33m"
FG="\e[39m"

function get_width() {
  COLUMNS=$(tput cols)
  echo $((COLUMNS > 80 ? 80 : COLUMNS))
}

function print_centered() {
  COLS=$(get_width)
  padding="$(printf '%0.1s' ={1..500})"
  printf '%*.*s %s %*.*s\n' 0 "$(((COLS-2-${#1})/2))" "$padding" "$1" 0 "$(((COLS-1-${#1})/2))" "$padding"
}

function warn() {
    echo -e -n "${FGY}Warning:${FG} "
    echo "$@"
}

function get_plugin_status() {
    if [ -L "$TARGET/$(basename "$plugin")" ]; then
      echo -e "${FGG}active${FG}"
    else
      echo -e "${FGR}inactive${FG}"
    fi
}


function list_plugins() {
  for folder in "$SOURCE"/*/; do
    if [[ ! -f "${folder}/__init__.py" ]]; then
      continue
    fi

    name="$(basename "${folder}")"
    description="$(cat "${folder}/description")"
#    description="$(grep -Pzo '(?s)r?"""\K.*?(?=""")' "$plugin" | tr -d '\0')"
    dependencies=$(cat "${folder}/dependencies")
    output="$(print_centered "${name}")
Status: $(get_plugin_status)
$description

Dependencies:
$(echo "$dependencies" | sed 's/^/- /')
"

    if [ "$1" ] && ! (echo "$output" | grep -iq "$1"); then
      continue
    fi

    echo "$output" | fold -sw "$(get_width)" | grep --color=always -iE "$1|$"
  done
}

function enable_plugin() {
  plugin=${1//-/_}
  source="$SOURCE/$plugin"
  if [ ! -f "$source/__init__.py" ]; then
    echo "Plugin '$1' not found"
    return 1
  fi
  target="$TARGET/$plugin"
  if [ -L "$target" ]; then
    echo "Plugin '$1' is already active"
    return 1
  fi
  ln -r -s "$source" "$target"
  echo "Successfully enabled '$1'"
}

function disable_plugin() {
  plugin=${1//-/_}
  source="$SOURCE/$plugin"
  if [ ! -f "$source/__init__.py" ]; then
    warn "Plugin '$1' not found"
  fi
  target="$TARGET/$plugin"
  if [ ! -L "$target" ]; then
    echo "Plugin '$1' is not active"
    return 1
  fi
  rm "$target"
  echo "Successfully disabled '$1'"
}

function activate_plugin() {
  plugin=${1//-/_}
  source="$SOURCE/$plugin"
  if [ ! -f "$source/__init__.py" ]; then
    echo "Plugin '$1' not found"
    return 1
  fi
  target="$TARGET/$plugin"
  if [ -f "$target" ]; then
    echo "Plugin '$1' is already active"
    return 1
  fi
  $PIP install -q -r "$source/dependencies"
  echo "Installed plugin dependencies"
  ln -r -s "$source" "$target"
  echo "Successfully activated '$1'"
}

function deactivate_plugin() {
  plugin=${1//-/_}
  source="$SOURCE/$plugin"
  if [ ! -f "$source/__init__.py" ]; then
    warn "Plugin '$1' not found"
  fi
  target="$TARGET/$plugin"
  if [ ! -L "$target" ]; then
    echo "Plugin '$1' is not active"
    return 1
  fi
  if command -v pip-autoremove &> /dev/null; then
    pip-autoremove "$(tr '\n' ' ' < "$target/dependencies")"
  else
    warn "pip-autoremove not found. Unclean dependencies removal (plugin-manager show-info)"
    $PIP uninstall -q -y -r "$target/dependencies"
  fi
  echo "Uninstalled plugin dependencies"
  rm -rf "$target"
  echo "Successfully deactivated '$1'"
}

function fix_dependencies() {
    for depfile in "$TARGET"/*/dependencies; do
      if [ ! -f "$depfile" ]; then
        continue
      fi
      $PIP install -q -r "$depfile"
    done
    echo "Plugin-Dependencies should be up to date now"
}

function print_help() {
  echo "plugin-manager {help,show-info,list,enable,disable,activate,deactivate}"
  echo "plugin-manager help"
  echo "    shows this message"
  echo "plugin-manager show-info"
  echo "    shows some meaningful messages"
  echo "plugin-manager list [query]"
  echo "    shows available plugins and their status"
  echo "plugin-manager enable <plugin-name>"
  echo "    enable a plugin to be loaded (but doesn't install dependencies)"
  echo "    this is helpful if you only want to build (scripts/make-build)"
  echo "plugin-manager disable <plugin-name>"
  echo "    disable a plugin to be loaded (but doesn't uninstall dependencies)"
  echo "plugin-manager activate <plugin-name>"
  echo "    enable a plugin and install its dependencies"
  echo "plugin-manager deactivate <plugin-name>"
  echo "    disable a plugin and uninstall its dependencies"
  echo "plugin-manager fix-dependencies"
  echo "    ensure that all plugin dependencies are installed"
}

function print_info() {
  print_centered "Plugin Dependencies removal"
  echo "During deactivation the plugin-manager attempts to remove all dependencies from a plugin." \
    "The problem comes when a dependency has a sub-dependency." \
    "With pip this doesn't get properly resolved." \
    "If pip-autoremove is installed it is used instead of pip and properly removed the sub-dependencies." \
    | fold -sw "$(get_width)"

  print_centered "virtualenv"
  echo "plugin-manager is configured to prevent installing dependencies into the global python interpreter." \
    "Start plugin-manager with 'UNSAFE=true plugin-manager ...' to ignore this feature" \
    | fold -sw "$(get_width)"
}


case "$1" in
"list")
  list_plugins "${@:2}"
;;
"enable")
  enable_plugin "${@:2}"
;;
"disable")
  disable_plugin "${@:2}"
;;
"activate")
  activate_plugin "${@:2}"
;;
"deactivate")
  deactivate_plugin "${@:2}"
;;
"fix-deps" | "fix-dependencies")
  fix_dependencies "${@:2}"
;;
"info" | "show-info")
  print_info "${@:2}"
;;
"help" | "--help" | "-h" | "")
  print_help "${@:2}"
;;
*)
  warn "Unknown command '$1'"
  print_help "${@:2}"
;;
esac
