#!/usr/bin/env bash
set -e
cd "$(realpath "$(dirname "$(realpath "$0")")/../")"


function make_build() {
  create_plugin_links
  cd "$(realpath "$(dirname "$(realpath "$0")")/../docs/")"
  bundle exec jekyll build --source . --destination ../src/dynapi/web/static/docs/
}

function development_run() {
  cd "$(realpath "$(dirname "$(realpath "$0")")/../docs/")"
  bundle exec jekyll serve
}

function create_plugin_links() {
  plugins="plugins"
  docs="docs"
  docs_plugins="$docs/plugins"
  shopt -s nullglob  # dont return the glob-pattern if nothing found
  shopt -s globstar  # allow recursive globs

  # cleanup of deprecated
  for existing in "$docs_plugins"/*.md; do
    if [ "$(basename "$existing")" = "index.md" ]; then
      continue
    fi
    echo "Removing deprecated plugin-readme: ${existing}"
    rm "$existing"
  done

  # creation of new
  for readme in "$plugins"/**/*.md; do
    echo "Creating link for ${readme}"
    ln -sr "$readme" "$docs_plugins/${readme////_}"
  done
}

function print_help() {
    echo " - build"
    echo " - development"
    echo " - links"
}


case "$1" in
"build")
  make_build "${@:2}"
;;
"dev" | "development")
  development_run "${@:2}"
;;
"links" | "plugin-links")
  create_plugin_links "${@:2}"
;;
"help" | "--help" | "-h" | "")
  print_help "${@:2}"
;;
*)
  warn "Unknown command '$1'"
  print_help "${@:2}"
;;
esac
